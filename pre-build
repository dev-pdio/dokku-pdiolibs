#!/usr/bin/env bash

set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
APP="$2"; IMAGE="dokku/$APP"

CERTIFICATE_PASSWORD=$(docker run --rm $IMAGE cat /app/.env | grep CERTIFICATE_PASSWORD | cut -d '=' -f2 | cut -d '"' -f2)
echo "-----> Installing pdiolibs libs ..."
COMMAND=$(cat <<EOF
echo deb http://cz.archive.ubuntu.com/ubuntu noble main universe >> /etc/apt/sources.list
apt update -y
apt install -y -q --no-install-recommends ghostscript curl poppler-utils fontconfig libfontconfig1-dev libfreetype6-dev libx11-dev libxext-dev libxrender-dev xfonts-base xfonts-75dpi fonts-freefont-ttf fonts-liberation fonts-dejavu
echo "[Start] Enabling ImageMagick PDF read and write..."
sed -i '/<\/policymap>/i \  \<policy domain="coder" rights="read | write" pattern="PDF" />' /etc/ImageMagick-6/policy.xml \
echo "[Finish] Enabling ImageMagick PDF read and write..."
echo "[Start] Enabling GhostScript Fonts..."
echo "/Arial << /FileType /TrueType /Path (/usr/share/fonts/truetype/msttcorefonts/Arial.ttf) /SubfontID 0 /CSI [(Identity) 0] >> ;" >> /usr/share/ghostscript/10.02.1/Resource/Init/cidfmap
echo "/Arial,Bold << /FileType /TrueType /Path (/usr/share/fonts/truetype/msttcorefonts/Arial_Bold.ttf) /SubfontID 0 /CSI [(Identity) 0] >> ;" >> /usr/share/ghostscript/10.02.1/Resource/Init/cidfmap
echo "[Finish] Enabling GhostScript Fonts..."
echo "[Start] Installing WkhtmltoPDF..."
curl -sLO https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-2/wkhtmltox_0.12.6.1-2.jammy_amd64.deb
dpkg -i wkhtmltox_0.12.6.1-2.jammy_amd64.deb
echo "[Finish] Installing WkhtmltoPDF..."
echo "[Start] OpenSSL Certificate Legacy Setup..."
# Gerar private key
openssl pkcs12 -in /app/certificates/pdio_crt.pfx -nocerts -nodes -legacy -password pass:$CERTIFICATE_PASSWORD -out /app/certificates/private.key
# Gerar public key
openssl rsa -in /app/certificates/private.key -pubout -out /app/certificates/public.key
# Gerar certificate
openssl pkcs12 -in /app/certificates/pdio_crt.pfx -clcerts -nokeys -legacy -password pass:$CERTIFICATE_PASSWORD -out /app/certificates/ping.crt
echo "[Finish] OpenSSL Certificate Legacy Setup..."
echo "-----> pdiolibs installed!"
sleep 1 # wait so that docker run has not exited before docker attach
EOF
)
id=$(docker run -d -u root $IMAGE /bin/bash -e -c "$COMMAND")
# enable logs
docker attach $id
test $(docker wait $id) -eq 0
docker commit $id $IMAGE > /dev/null
